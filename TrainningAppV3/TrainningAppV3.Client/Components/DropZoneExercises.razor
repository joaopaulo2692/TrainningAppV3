@typeparam T
@using Client.Pages
@using TrainningApp.Core.DTO.Exercise
@using TrainningApp.Core.DTO.TrainningExercise
@using static TrainningAppV3.Client.Pages.Trainning
@inject IDialogService DialogService

@* <MudButton OnClick="OpenDialog" Variant="Variant.Filled" Color="Color.Success" Style="margin-right: 30px; padding: 5px 10px; font-size: 0.75rem; width: 100px; height: 30px;">
    Adicionar
</MudButton> *@
<div class="@Class">
    <MudButton OnClick="OpenDialog" Variant="Variant.Filled" Color="Color.Success" Style="margin-right: 20px;">Adicionar</MudButton>
    @if (TrainningExercise == null)
    {
        <div>
            Nenhum Exercício Adicionado
        </div>

    }
    @if (TrainningExercise != null)
    {
        <MudDropContainer T="DropZoneItem" Items="_items" ItemsSelector="@((item, dropzone) => item.Zone == dropzone)" ItemDropped="ItemUpdated" Class="4 flex-grow-1">
            <ChildContent>
                <MudDropContainer T="DropZone" Items="_zones" ItemsSelector="@((item, dropzone) => true)" Class="5">
                    <ChildContent>
                        <MudDropZone T="DropZone" AllowReorder Class="6 rounded mud-background-gray px-4 py-1 ma-4" />
                     </ChildContent>
                     <ItemRenderer>
                         <MudPaper Class="pa-4 my-4">
                             @*                      <MudText Typo="Typo.h6">@context.Name</MudText> *@
                             @* <MudButton OnClick="OpenDialog" Variant="Variant.Filled" Color="Color.Success" Style="margin-right: 20px;">Adicionar</MudButton> *@
                             <MudDropZone T="DropZoneItem" Identifier="@context.Name" AllowReorder Class="rounded mud-background-gray px-4 py-1 ma-4" />
                         </MudPaper>
                     </ItemRenderer>
                 </MudDropContainer>
             </ChildContent>
             <ItemRenderer>

                 <MudPaper Class="pa-4 my-4 d-flex align-items-center justify-content-between" Style="width: 100%;">
                     <MudTextField ShrinkLabel @bind-Value="context.Exercise.ExerciseName" Label="Exercício" Variant="Variant.Text" Style="max-width: 200px; height: 32px; font-size: 0.875rem; margin-right: 20px;" />
                     <MudTextField ShrinkLabel @bind-Value="context.Exercise.Set" Label="Série" Variant="Variant.Text" Style="max-width: 100px; height: 32px; font-size: 0.875rem;" />
                     <MudTextField ShrinkLabel @bind-Value="context.Exercise.Reps" Label="Rep" Variant="Variant.Text" Style="max-width: 100px; height: 32px; font-size: 0.875rem;" />
                     <MudTextField ShrinkLabel @bind-Value="context.Exercise.Weight" Label="Carga" Variant="Variant.Text" Style="max-width: 100px; height: 32px; font-size: 0.875rem;" />
                     <MudTextField ShrinkLabel @bind-Value="context.Exercise.Interval" Label="Intervalo" Variant="Variant.Text" Style="max-width: 100px; height: 32px; font-size: 0.875rem;" />
                     <MudTextField ShrinkLabel @bind-Value="context.Exercise.Info" Label="Info" Variant="Variant.Text" Style="max-width: 100px; height: 32px; font-size: 0.875rem;" />
                     @* <MudTextField ShrinkLabel @bind-Value="context.Exercise.TrainningDayId" Label="Info" Variant="Variant.Text" *@
                                  @*  Style="display: none; max-width: 100px; height: 32px; font-size: 0.875rem;" /> *@
                     <MudButton OnClick="() => SelectEditExercise(context.Exercise)" Variant="Variant.Filled" Color="Color.Warning" Style="font-size: 0.75rem; padding: 4px 8px; min-width: auto; height: 32px; margin-right: 3px;">
                         Editar
                     </MudButton>

                     <MudButton OnClick="() => RemoveExercise(context)" Variant="Variant.Filled" Color="Color.Error" Style="font-size: 0.75rem; padding: 4px 8px; min-width: auto; height: 32px; margin-right: 3px;">
                         Deletar
                     </MudButton>
                 </MudPaper>
             </ItemRenderer>
         </MudDropContainer>
    }
  

 </div>

@code {

    [Parameter]
    // public EventCallback<TrainningExerciseVO> OnAddExercise { get; set; }
    public EventCallback<DropZoneItem> OnAddExercise { get; set; }
    [Parameter]
    public EventCallback<DropZoneItem> OnRemoveExercise { get; set; }
    [Parameter]
    public EventCallback<DropZoneItem> OnEditExercise { get; set; }


    [Parameter]
    public int ParameterTrainningDay { get; set; }
    [Parameter]
    public int ParameterOrdenation { get; set; }
    [Parameter]
    public string ParameterNameZone { get; set; }
    [Parameter] 
    public string Class { get; set; }

    [Parameter]
    public TrainningExerciseVO TrainningExercise { get; set; }


    private async Task AddExercise(DropZoneItem dropZoneItem)
    {
        // Chame o callback passando o exercício adicionado
        await OnAddExercise.InvokeAsync(dropZoneItem);
    }

    private async Task RemoveExercise(DropZoneItem dropZoneItem)
    {
        // Chame o callback passando o exercício adicionado
        await OnRemoveExercise.InvokeAsync(dropZoneItem);
    }


    [Parameter]
    public List<DropZoneItem> _items { get; set; }

    [Parameter]
    public List<DropZone> _zones { get; set; }

    public bool IsToEdited = false;

    public TrainningExerciseVO exerciseToEdited { get; set; }

    private void SelectEditExercise(TrainningExerciseVO exercise)
    {
        exerciseToEdited = exercise;
        IsToEdited = true;
        OpenDialog();
        exerciseToEdited = null;
        return;
    }


    private async Task OpenDialog()
    {
        var parameters = new DialogParameters
    {
        { "EditExercise", exerciseToEdited },
        {"EditExibition", IsToEdited}// Passa o exercício existente ou null
    };

        var options = new DialogOptions { CloseOnEscapeKey = true };
        var dialog = exerciseToEdited == null ? DialogService.Show<AddExercise>("Adicionar Exercício", parameters, options) :
        DialogService.Show<AddExercise>("Editar Exercício", parameters, options);

        var result = await dialog.Result;
        // if (result.Canceled) return;
        if (!result.Canceled)
        {
            // Obtenha o exercício adicionado a partir do diálogo
            var addedExercise = (TrainningExerciseVO)result.Data;
            if (addedExercise == null) return;
            addedExercise.TrainningDayId = ParameterTrainningDay;
            addedExercise.Ordenation = ParameterOrdenation + 1;
            // Chame o método para adicionar o exercício ao componente pai
            DropZoneItem dropItem = new DropZoneItem()
                {
                    Name = ParameterNameZone,
                    Exercise = addedExercise,
                    Zone = "Drop Zone 1"

                };
            await AddExercise(dropItem);

        }

    }
    private void ItemUpdated(MudItemDropInfo<DropZoneItem> dropItem)
    {
        dropItem.Item.Zone = dropItem.DropzoneIdentifier;
        var itemsInZone = _items
      .Where(item => item.Zone == dropItem.DropzoneIdentifier)
      .ToList();

        // Atualiza a propriedade Ordenation para cada item na zona, com base na nova ordem
        for (int i = 0; i < itemsInZone.Count; i++)
        {
            itemsInZone[i].Exercise.Ordenation = i + 1;
        }
    }
    
}
