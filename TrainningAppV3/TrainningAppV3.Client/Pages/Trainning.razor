@inject IDialogService DialogService
@using TrainningApp.Core.DTO.TrainningDay
@using TrainningApp.Core.DTO.TrainningExercise
@using TrainningApp.Core.Entities
@using TrainningAppV3.Client.Components
@using TrainningAppV3.Client.Layout
@layout AdminLayout


<h3>Sessões do treino</h3>
<div class="parent-container">
    <MudTabs @bind-ActivePanelIndex="_selectedTabIndex" Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6" @key="_uniqueKey" Class="dropzone-small">
        @foreach (var drop in DropzoneList)
        {
            <MudTabPanel Text=@drop[0].Name Key="@drop.GetHashCode()">
                @if (drop[0].Exercise == null)
                {
                    <DropZoneExercises OnAddExercise="HandleAddExercise"
                                       T="DropZoneItem"
                                       _items="drop"
                                       _zones="_zones"
                                       ParameterTrainningDay=drop[0].TrainningDayId
                                       ParameterNameZone=@drop[0].Name
                                       TrainningExercise="drop[0].Exercise" />
                }
                else
                {
                    <DropZoneExercises OnAddExercise="HandleAddExercise"
                                       OnRemoveExercise="HandleRemoveExercise"
                                       OnEditExercise="HandleEditExercise"
                                       T="DropZoneItem"
                                       _items="drop"
                                       _zones="_zones"
                                       ParameterTrainningDay=drop[0].TrainningDayId
                                       ParameterOrdenation=drop[0].Exercise.Ordenation
                                       ParameterNameZone=@drop[0].Name
                                       TrainningExercise="drop[0].Exercise" />
                }


            </MudTabPanel>
        }
        <MudTabPanel Text="Adicionar Sessão" OnClick="() => AddNewTrainningDay()">
            <!-- Conteúdo da aba (opcional) -->
        </MudTabPanel>

    </MudTabs>
</div>
@* <MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6">





</MudTabs> *@

<style>
    /* .parent-container { */
    /* display: flex; */
    /* justify-content: center; /* Centraliza horizontalmente */
    /* align-items: center; /* Centraliza verticalmente */
    /* height: 100vh; /* Altura total da tela */
    /* width: 100%; /* Largura total disponível */
    /* } */

    .parent-container {
        display: flex;
        justify-content: center; /* Centraliza horizontalmente */
        align-items: flex-start; /* Alinha o conteúdo ao topo */
        flex-direction: column; /* Garante que os itens sejam empilhados verticalmente */
        width: 100%; /* Largura total disponível */
        height: auto; /* Altura será definida pelo conteúdo */
        padding: 20px; /* Adicione um espaçamento interno, se necessário */
    }


    .dropzone-small {
        width: 87%; /* Ajusta para 100% da largura do contêiner */
        max-width: 1400px; /* Limite máximo de largura */
        /* height: 700px; /* Altura fixa */ */ padding: 16px;
        margin: 10px;
    }

</style>

@code {
    private int _selectedTabIndex = 0;
    private int _uniqueKey = 0;
    public string Exercicio { get; set; }
    public string Serie { get; set; }
    private int SelectedTabIndex { get; set; }
    public Position Position { get; set; } = Position.Left;

    private void AddNewTrainningDay()
    {
        string letter = DropzoneList.Select(x => x.Select(x => x.Name)).Last().FirstOrDefault();
        // char currentLetter = 'C';
        char currentLetter = letter[0];
        char nextLetter = (char)(currentLetter + 1);
        DropzoneList.Add(new List<DropZoneItem>
    {
        new DropZoneItem
        {
            Zone = "Drop Zone 1",
            TrainningDayOrdenation = 3,
            TrainningDayId = 3,
            // Name = "C",
            Name = nextLetter.ToString(),

        }
    });
        _uniqueKey++;
    }
    // private async Task HandleAddExercise(TrainningExerciseVO newExercise)
    // {

    //     _items.Add(new DropZoneItem { Zone = "Drop Zone 1", Exercise = newExercise, Name = "A" });
    //     DropzoneList = new List<List<DropZoneItem>>(DropzoneList); // Recrie a lista para atualizar o estado
    //     _uniqueKey++;
    //     await InvokeAsync(StateHasChanged);
    // }

    private async Task HandleAddExercise(DropZoneItem newExercise)
    {
        int cont = 0;
        foreach (var sublist in DropzoneList)
        {

            if (sublist.Any(x => x.Name == newExercise.Name))
            {
                if (sublist[0].Exercise == null)
                {
                    sublist[0] = newExercise;
                    break;
                }
                sublist.Add(newExercise);
                break;
            }
            cont++;
        }
        DropzoneList = new List<List<DropZoneItem>>(DropzoneList); // Recrie a lista para atualizar o estado
        _uniqueKey++;
        _selectedTabIndex = cont;
        await InvokeAsync(StateHasChanged);
    }

    private async Task HandleRemoveExercise(DropZoneItem removeExercise)
    {
        int cont = 0;
        bool hasToBreak = false;
        foreach (var sublist in DropzoneList)
        {
            foreach (var exercise in sublist)
            {
                if (removeExercise == exercise && sublist.Count > 1)
                {
                    sublist.Remove(exercise);
                    hasToBreak = true;
                    break;
                }
                else if (removeExercise == exercise && sublist.Count == 1)
                {
                    exercise.Exercise = null;
                    hasToBreak = true;
                    break;
                }
            }
            if (hasToBreak) break;
            cont++;
        }

        DropzoneList = new List<List<DropZoneItem>>(DropzoneList); // Recrie a lista para atualizar o estado
        _uniqueKey++;
        _selectedTabIndex = cont;
        await InvokeAsync(StateHasChanged);
    }

    private async Task HandleEditExercise(DropZoneItem editedExercise)
    {
        int cont = 0;
        bool hasToBreak = false;
        foreach (var sublist in DropzoneList)
        {
            foreach (var exercise in sublist)
            {
                if (exercise.Name == editedExercise.Name)
                {
                    if (editedExercise.Exercise.Ordenation == exercise.Exercise.Ordenation)
                    {
                        exercise.Exercise = editedExercise.Exercise;
                        hasToBreak = true;
                        break;
                    }
                }
            }
            if (hasToBreak) break;
            cont++;
        }

        DropzoneList = new List<List<DropZoneItem>>(DropzoneList); // Recrie a lista para atualizar o estado
        _uniqueKey++;
        _selectedTabIndex = cont;
        await InvokeAsync(StateHasChanged);
    }

    // List<TrainningDayReturnVO> trainningDayReturnList = new List<TrainningDayReturnVO>();
    List<TrainningExerciseVO> exercises = new List<TrainningExerciseVO>()
    {
        new TrainningExerciseVO()
        {
            Reps = "10",
            Set = 3,
            ExerciseName = "Supino",
            Info = "Normal",
            Ordenation = 1
        },
         new TrainningExerciseVO()
        {
            Reps = "10",
            Set = 3,
            ExerciseName = "Supino reto",
            Info = "Normal",
            Ordenation = 2
        },
         new TrainningExerciseVO()
        {
            Reps = "10",
            Set = 3,
            ExerciseName = "Supino inclinado",
            Info = "Normal",
            Ordenation = 2
        }
    };
    // TrainningExerciseVO trainningExercise = new TrainningExerciseVO()
    //     {
    //         Reps = 10,
    //         Set = 3,
    //         ExerciseName = "Supino"
    //     };



    TrainningDay trainningDay = new TrainningDay();


    // private void ItemUpdated(MudItemDropInfo<DropZoneItem> dropItem) => dropItem.Item.Zone = dropItem.DropzoneIdentifier;

    public List<DropZone> _zones = new()
    {
        new() { Name = "Drop Zone 1" },
        // new() { Name = "Drop Zone 2" }
    };

    public List<DropZoneItem> _items = new()
    {
        // new() { Zone = "Drop Zone 1", Name = "Item 1" },
        // new() { Zone = "Drop Zone 1", Name = "Item 2" },
        // new() { Zone = "Drop Zone 2", Name = "Item 3" },

    };

    public List<DropZoneItem> _items2 = new()
    {
        // new() { Zone = "Drop Zone 1", Name = "Item 1" },
        // new() { Zone = "Drop Zone 1", Name = "Item 2" },
        // new() { Zone = "Drop Zone 2", Name = "Item 3" },

    };

    public class DropZone
    {
        public string Name { get; init; }

    }

    public class DropZoneItem
    {
        public string Zone { get; set; }
        public string Name { get; init; }
        public TrainningExerciseVO Exercise { get; set; }
        public TrainningDayReturnVO TrainningDayReturn { get; set; }
        public int TrainningDayOrdenation { get; set; }
        public int TrainningDayId { get; set; }
    }
    private List<List<DropZoneItem>> DropzoneList = new List<List<DropZoneItem>>();

    protected override void OnParametersSet()
    {
        StateHasChanged(); // Força atualização ao receber novos parâmetros
    }


    protected override void OnInitialized()
    {
        StateHasChanged();

        _items = new List<DropZoneItem>
        {
            new() { Zone = "Drop Zone 1", TrainningDayOrdenation=1, TrainningDayId =1, Name = "A", Exercise =    new TrainningExerciseVO()
        {
            Reps = "10",
            Set = 3,
            ExerciseName = "Supino inclinado",
            Info = "Normal",
            Ordenation = 3,
            TrainningDayId = 1
        } },
            new() { Zone = "Drop Zone 1",TrainningDayOrdenation=1, TrainningDayId =1, Name = "A", Exercise =  new TrainningExerciseVO()
        {
            Reps = "10",
            Set = 3,
            ExerciseName = "Supino reto",
            Info = "Normal",
            Ordenation = 2,
            TrainningDayId = 1
        } },
            new() { Zone = "Drop Zone 1", TrainningDayOrdenation=1, TrainningDayId =1, Name = "A", Exercise =  new TrainningExerciseVO()
        {
            Reps = "10",
            Set = 3,
            ExerciseName = "Supino",
            Info = "Normal",
            Ordenation = 1,
            TrainningDayId = 1
        } }
        };

        _items2 = new List<DropZoneItem>
        {

            new() { Zone = "Drop Zone 1", TrainningDayOrdenation=2, TrainningDayId =2, Name = "B", Exercise =  new TrainningExerciseVO()
        {
            Reps = "10",
            Set = 3,
            ExerciseName = "Supino reto",
            Info = "Normal",
            Ordenation = 2,
            TrainningDayId = 2
        } },
            new() { Zone = "Drop Zone 1",TrainningDayOrdenation=2, TrainningDayId =2, Name = "B", Exercise =  new TrainningExerciseVO()
        {
            Reps = "10",
            Set = 3,
            ExerciseName = "Supino",
            Info = "Normal",
            Ordenation = 1,
            TrainningDayId = 2
        } }
        };

        DropzoneList.Add(_items);
        DropzoneList.Add(_items2);

        // DropzoneList.SelectMany(x => x.OrderBy( x => x.Name))
    }

    List<TrainningDayReturnVO> trainningDayReturnList = new List<TrainningDayReturnVO>()
    {
        new TrainningDayReturnVO()
        {
            Name = "A",
            Ordenation = 1,
            TrainningExercises = new List<TrainningExerciseVO>()
            {
                new TrainningExerciseVO()
                {
                Reps = "10",
                Set = 3,
                ExerciseName = "Supino",
                Info = "Normal",
                Ordenation = 1,
                Weight = "60",
                Interval = 30

                },
                 new TrainningExerciseVO()
                {
                Reps = "10",
                Set = 3,
                ExerciseName = "Supino Inclinado",
                Info = "Normal",
                Ordenation = 2,
                Weight = "60",
                Interval = 30
                },
                 new TrainningExerciseVO()
                {
                Reps = "10",
                Set = 3,
                ExerciseName = "Supino Declinado",
                Info = "Normal",
                Ordenation = 3,
                Weight = "60",
                Interval = 30
                },
            }

        },

        new TrainningDayReturnVO()
        {
            Name = "B",
            Ordenation = 2,
            TrainningExercises = new List<TrainningExerciseVO>()
            {
                new TrainningExerciseVO()
                {
                Reps = "10",
                Set = 3,
                ExerciseName = "Leg",
                Info = "Normal",
                Ordenation = 1,
                Weight = "60",
                Interval = 30

                },
                 new TrainningExerciseVO()
                {
                Reps = "10",
                Set = 3,
                ExerciseName = "Cadeira extensora",
                Info = "Normal",
                Ordenation = 2,
                Weight = "60",
                Interval = 30
                },
                 new TrainningExerciseVO()
                {
                Reps = "10",
                Set = 3,
                ExerciseName = "Panturrilha",
                Info = "Normal",
                Ordenation = 3,
                Weight = "60",
                Interval = 30
                },
            }

        },
        new TrainningDayReturnVO()
        {
            Name = "C",
            TrainningExercises = new List<TrainningExerciseVO>()
            {
                new TrainningExerciseVO()
                {
                Reps = "10",
                Set = 3,
                ExerciseName = "Pulley",
                Info = "Normal",
                Ordenation = 1,
                Weight = "60",
                Interval = 30

                },
                 new TrainningExerciseVO()
                {
                Reps = "10",
                Set = 3,
                ExerciseName = "Encolhimento",
                Info = "Normal",
                Ordenation = 2,
                Weight = "60",
                Interval = 30
                },
                 new TrainningExerciseVO()
                {
                Reps = "10",
                Set = 3,
                ExerciseName = "Abd",
                Info = "Normal",
                Ordenation = 3,
                Weight = "60",
                Interval = 30
                },
            }

        }
    };




}
