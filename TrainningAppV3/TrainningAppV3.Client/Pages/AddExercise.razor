@using MudBlazor
@using TrainningApp.Core.DTO.Exercise
@using TrainningApp.Core.DTO.Muscle


<MudDialog MaxWidth="MaxWidth.ExtraLarge" FullWidth="true" Class="custom-dialog">
    <DialogContent>
        <div class="d-flex flex-column py-1" style="min-height: 420px;">
            <MudAutocomplete T="string" Label="Exercício" @bind-Value="exercise" SearchFunc="@SearchExercise"
                             ResetValueOnEmptyText="@resetValueOnEmptyText"
                             CoerceText="@coerceText" CoerceValue="@coerceValue" />
            <div class="d-flex flex-row align-items-center">
                <MudNumericField Label="Série" @bind-Value="set" Max="9" Min="0" Variant="Variant.Outlined" Style="width: 80px; height: 30px;" />
                <MudTextField Label="Repetições" @bind-Value="reps[0]" />
                <MudNumericField Label="Série"
                                 @bind-Value="set"
                                 Max="9"
                                 Min="0"
                                 Variant="Variant.Outlined"
                                 Style="width: 80px; height: 30px;"
                                 Class="invisible" />
                <MudTextField Label="Carga" @bind-Value="weights[0]" />
            </div>
            @for (int i = 1; i < set; i++)
            {
                <div class="d-flex flex-row align-items-center">
                    <MudNumericField Label="Série"
                                     @bind-Value="set"
                                     Max="9"
                                     Min="0"
                                     Variant="Variant.Outlined"
                                     Style="width: 80px; height: 30px;"
                                     Class="invisible" />
                    <MudTextField Label="" @bind-Value="reps[i]" />
                    <MudNumericField Label="Série"
                                     @bind-Value="set"
                                     Max="9"
                                     Min="0"
                                     Variant="Variant.Outlined"
                                     Style="width: 80px; height: 30px;"
                                     Class="invisible" />
                    <MudTextField Label="" @bind-Value="weights[i]" />
                </div>
            }
            <MudTextField Label="Observação" @bind-Value="observation" />
        </div>
    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Filled" Color="Color.Success">Adicionar</MudButton>
        <MudButton Color="Color.Primary" OnClick="Close">Fechar</MudButton>
    </DialogActions>
</MudDialog>

<style>
    .custom-dialog {
        max-width: 800px; /* Ajuste conforme necessário para largura desejada */
        width: 100%; /* Certifique-se de que ocupa toda a largura permitida */
    }
</style>

@code {
    private bool resetValueOnEmptyText;
    private bool coerceText;
    private bool coerceValue;
    private string exercise; // Corrigido: adicione o ponto e vírgula
    private int set = 1;
    private string observation;
    private List<string> reps = new List<string> { "", "", "", "", "" };
    private List<string> weights = new List<string> { "", "", "", "", "" };

    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    private void Close() => MudDialog.Close(DialogResult.Ok(true));

    private async Task<IEnumerable<string>> SearchExercise(string value, CancellationToken token)
    {
        await Task.Delay(5, token); // Simulação de chamada assíncrona
        if (string.IsNullOrEmpty(value))
            return exerciseList.Select(x => x.Name);
        return exerciseList.Select(x => x.Name).Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    List<ExerciseReturnVO> exerciseList = new List<ExerciseReturnVO>
    {
        new ExerciseReturnVO { Id = 1, Name = "Supino reto" },
        new ExerciseReturnVO { Id = 2, Name = "Tríceps testa" },
        new ExerciseReturnVO { Id = 3, Name = "Rosca" }
    };

    List<MuscleVO> musclesList = new List<MuscleVO>
    {
        new MuscleVO{Id = 1, Name ="Peito",exerciseIds=new List<int>(){1} },
        new MuscleVO{Id = 1, Name ="Tríceps",exerciseIds=new List<int>(){2} },
        new MuscleVO{Id = 1, Name ="Bíceps",exerciseIds=new List<int>(){3} },
    }
}
