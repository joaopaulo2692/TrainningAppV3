@using MudBlazor
@using TrainningApp.Core.DTO.Exercise
@using TrainningApp.Core.DTO.Muscle


<MudDialog MaxWidth="MaxWidth.ExtraLarge" FullWidth="true" Class="custom-dialog">
    <DialogContent>
        @if (set > 4) {
            dialogScreen = "620px";
        }
        <div class="d-flex flex-column py-1" style="min-height: @dialogScreen;">
            <MudAutocomplete T="string" Label="Filtro por músculo" @bind-Value="muscleSelected" SearchFunc="@SearchByMuscle"
                             ResetValueOnEmptyText="@resetValueOnEmptyText"
                             CoerceText="@coerceText" CoerceValue="@coerceValue" />


            <MudAutocomplete T="string" Label="Exercício" @bind-Value="exerciseSelected" SearchFunc="@SearchExercise"
                             ResetValueOnEmptyText="@resetValueOnEmptyText"
                             CoerceText="@coerceText" CoerceValue="@coerceValue" />
            <div class="d-flex flex-row align-items-center">
                <MudNumericField Label="Série" @bind-Value="set" Max="9" Min="0" Variant="Variant.Outlined" Style="width: 80px; height: 30px;" />
                <MudTextField Label="Repetições" @bind-Value="reps[0]" />
                <MudNumericField Label="Série"
                                 @bind-Value="set"
                                 Max="9"
                                 Min="0"
                                 Variant="Variant.Outlined"
                                 Style="width: 80px; height: 30px;"
                                 Class="invisible" />
                <MudTextField Label="Carga" @bind-Value="weights[0]" />
            </div>
            @for (int i = 1; i < set; i++)
            {
                <div class="d-flex flex-row align-items-center">
                    <MudNumericField Label="Série"
                                     @bind-Value="set"
                                     Max="9"
                                     Min="0"
                                     Variant="Variant.Outlined"
                                     Style="width: 80px; height: 30px;"
                                     Class="invisible" />
                    <MudTextField Label="" @bind-Value="reps[i]" />
                    <MudNumericField Label="Série"
                                     @bind-Value="set"
                                     Max="9"
                                     Min="0"
                                     Variant="Variant.Outlined"
                                     Style="width: 80px; height: 30px;"
                                     Class="invisible" />
                    <MudTextField Label="" @bind-Value="weights[i]" />
                </div>
            }
            <MudTextField Label="Observação" @bind-Value="observation" />
            <MudButton OnClick="OpenVideo" Variant="Variant.Filled" Disabled="exerciseNotHasVideo" Color="Color.Secondary" Style="margin-right: 20px;">Visualizar Exercício</MudButton>
            @if(videoOn == true)
            {
                <div class="d-flex justify-content-center">
                    <div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden; width: 640px;">
                        <iframe src="@exerciseList.FirstOrDefault().Video"
                                style="position: absolute; top: 0; left: 0; width: 100%; height: 100%;"
                                frameborder="0"
                                allowfullscreen>
                        </iframe>
                    </div>
                </div>
            }
            
        </div>
    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Filled" Color="Color.Success">Adicionar</MudButton>
        <MudButton Color="Color.Primary" OnClick="Close">Fechar</MudButton>
    </DialogActions>
</MudDialog>

<style>
    .custom-dialog {
        max-width: 800px; /* Ajuste conforme necessário para largura desejada */
        width: 100%; /* Certifique-se de que ocupa toda a largura permitida */
    }
</style>

@code {
    private bool videoOn = false;
    private bool exerciseNotHasVideo = true;
    private string dialogScreen = "420px";
    private bool resetValueOnEmptyText;
    private bool coerceText;
    private bool coerceValue;
    private string exerciseSelected; // Corrigido: adicione o ponto e vírgula
    private string muscleSelected;
    private int set = 1;
    private string observation;
    private List<string> reps = new List<string> { "", "", "", "", "" };
    private List<string> weights = new List<string> { "", "", "", "", "" };
    ExerciseReturnVO exerciseVO = new ExerciseReturnVO();
    MuscleVO muscleVO = new MuscleVO();

    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    private void Close() => MudDialog.Close(DialogResult.Ok(true));

    private void OpenVideo()
    {
        videoOn = true;
        ExerciseReturnVO exerciseVO = exerciseList.FirstOrDefault();
        StateHasChanged();
    }
    private async Task<IEnumerable<string>> SearchExercise(string value, CancellationToken token)
    {
        exerciseList = exerciseListCopy;
        await Task.Delay(5, token); // Simulação de chamada assíncrona
        MuscleVO muscleVO = musclesList.Where(x => x.Name == muscleSelected).FirstOrDefault();

        if (muscleVO != null) exerciseList = exerciseList.Where(x => x.Muscles.Contains(muscleVO.Name)).ToList();
        if (string.IsNullOrEmpty(value))
            return exerciseList.Select(x => x.Name);
        ExerciseReturnVO exerciseVO = exerciseList.Where(x => x.Name == value).FirstOrDefault();
        if (exerciseVO != null)
        {
            if (exerciseVO.Video == null) exerciseNotHasVideo = true;
            else if (exerciseVO.Video == "") exerciseNotHasVideo = true;
            else if (exerciseVO.Video != null && exerciseVO.Video != "") exerciseNotHasVideo = false;
    
        }
        StateHasChanged();

        return exerciseList.Select(x => x.Name).Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    private async Task<IEnumerable<string>> SearchByMuscle(string value, CancellationToken token)
    {
        await Task.Delay(5, token); // Simulação de chamada assíncrona
        if (string.IsNullOrEmpty(value))         
            return musclesList.Select(x => x.Name);
       
        
        return musclesList.Select(x => x.Name).Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }
    protected override void OnParametersSet()
    {
        var selectedMuscle = musclesList.FirstOrDefault(x => x.Name == muscleSelected);
        if (selectedMuscle != null)
        {
            exerciseList = exerciseList.Where(x => x.Muscles.Contains(selectedMuscle.Name)).ToList();
        }
    }

    List<ExerciseReturnVO> exerciseList = new List<ExerciseReturnVO>
    {
        new ExerciseReturnVO { Id = 1, Name = "Supino reto", Muscles = new List<string>{"Peito" },Video = "https://www.youtube.com/watch?v=tK1UhxcYrqE"  },
        new ExerciseReturnVO { Id = 2, Name = "Tríceps testa" ,Muscles = new List<string>{"Tríceps" } },
        new ExerciseReturnVO { Id = 3, Name = "Rosca" ,Muscles = new List<string>{"Bíceps" } }
    };

    List<ExerciseReturnVO> exerciseListCopy = new List<ExerciseReturnVO>
    {
        new ExerciseReturnVO { Id = 1, Name = "Supino reto", Muscles = new List<string>{"Peito" }, Video = "https://www.youtube.com/watch?v=tK1UhxcYrqE" },
        new ExerciseReturnVO { Id = 2, Name = "Tríceps testa" ,Muscles = new List<string>{"Tríceps" } },
        new ExerciseReturnVO { Id = 3, Name = "Rosca" ,Muscles = new List<string>{"Bíceps" } }
    };

    List<MuscleVO> musclesList = new List<MuscleVO>
    {
        new MuscleVO{Id = 1, Name ="Peito",exerciseIds=new List<int>(){1} },
        new MuscleVO{Id = 2, Name ="Tríceps",exerciseIds=new List<int>(){2} },
        new MuscleVO{Id = 3, Name ="Bíceps",exerciseIds=new List<int>(){3} },
    };
}
