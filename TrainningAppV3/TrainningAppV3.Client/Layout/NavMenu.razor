@implements IDisposable

@inject NavigationManager NavigationManager

<MudNavMenu>
    <MudNavLink Href="" Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.Home">Home</MudNavLink>
    <MudNavLink Href="aluno" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.List">Aluno</MudNavLink>
    <MudNavLink Href="personal" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.List">Personal</MudNavLink>
    <MudNavLink Href="clientes" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.Person">Clientes</MudNavLink>
    <MudNavGroup Title="Treino" Icon="@Icons.Material.Filled.FitnessCenter" Expanded="false">
        <MudNavLink Icon="@Icons.Material.Filled.DirectionsRun" Href="/exercicios">Exercícios</MudNavLink>
        <MudNavLink Icon="@Icons.Material.Filled.Favorite" Href="/security">Grupo Muscular</MudNavLink>
        <MudNavLink Icon="@Icons.Material.Filled.FitnessCenter" Href="/listatreinos">Treinos</MudNavLink>
    </MudNavGroup>
    <MudNavLink Href="auth" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.Lock">Auth Required</MudNavLink>
    <AuthorizeView>
        <Authorized>
            <MudNavLink Href="Account/Manage" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.Person">@context.User.Identity?.Name</MudNavLink>
            <MudNavLink Href="@($"Account/Logout?ReturnUrl={currentUrl}")" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.Add">Logout</MudNavLink>
        </Authorized>
        <NotAuthorized>
            <MudNavLink Href="Account/Register" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.Person">Register</MudNavLink>
            <MudNavLink Href="Account/Login" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.Password">Login</MudNavLink>
        </NotAuthorized>
    </AuthorizeView>
</MudNavMenu>


@code {
    private string? currentUrl;

    protected override void OnInitialized()
    {
        currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        NavigationManager.LocationChanged += OnLocationChanged;
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
        StateHasChanged();
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }
}


