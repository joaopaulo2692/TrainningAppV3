@page "/Account/aluno"
@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity
@using TrainningApp.Core
@using TrainningAppV3.Data


@* @inject IUserRepository UserRepository *@
 @* @inject HttpClient Http  *@
@* @inject IUserRepository User *@
@inject UserManager<ApplicationUser> UserManager
@inject IUserStore<ApplicationUser> UserStore
@inject SignInManager<ApplicationUser> SignInManager
@* @inject IEmailSender<ApplicationUser> EmailSender
@inject ILogger<Register> Logger *@
@inject NavigationManager NavigationManager
@* @inject IdentityRedirectManager RedirectManager *@

<MudGrid>
    <MudItem xs="6">
        <MudImage Src="images/instrutor-na-academia.jpg" Style="width: 100%; height: auto;" />
    </MudItem>
    <MudItem xs="6">
        <MudText Typo="Typo.h6">
            <MudText Typo="Typo.h5">Olá! Você como aluno poderá escolher o personal que tem o perfil para o seu objetivo!</MudText>

            <p>
                -Você quer emagrecer?
            </p>
            <p>
                -Você quer ganhar massa muscular?
            </p>
            <p>
                -Você quer qualidade de vida?
            </p>
            <MudText Typo="Typo.h4" Align="Align.Center">Temos um profissional para você!</MudText>
            <MudGrid>
                <MudItem xs="12" sm="7">
                    <MudPaper Class="pa-4">
                        <MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors">
                            <MudTextField T="string" @bind-Value="user.UserName" Label="Usuário" Required="true" RequiredError="Usuário é requerido!" />
                            <MudTextField T="string" @bind-Value="user.Email" Label="Email" Required="true" RequiredError="E-mail é requerido!"
                                          Validation="@(new EmailAddressAttribute() {ErrorMessage = "O e-mail é inválido"})" />
                            <MudTextField T="string" Label="Senha" HelperText="Escolha uma senha forte" @ref="pwField1"
                                          InputType="InputType.Password" @bind-Value="user.PasswordHash"
                                          Validation="@(new Func<string, IEnumerable<string>>(PasswordStrength))" Required="true"
                                          RequiredError="Senha é requerido!" />
                            <MudTextField T="string"
                                          Label="Senha" HelperText="Repita a senha" InputType="InputType.Password"
                                          Validation="@(new Func<string, string>(PasswordMatch))" />
                            <div class="d-flex">
                                <MudRadioGroup T="string" Required="true" RequiredError="Account type is required!">
                                    <MudRadio Value="@("Personal")">Personal</MudRadio>
                                    <MudRadio Value="@("Aluno")">Aluno</MudRadio>
                                </MudRadioGroup>
                            </div>
                            <div class="d-flex align-center justify-space-between">
                                <MudCheckBox T="bool" Required="true" RequiredError="You must agree" Label="I agree!" />
                                <MudButton Variant="Variant.Filled" @onclick="RegisterUser" Color="Color.Primary" Disabled="@(!success)" Class="ml-auto">Registrar</MudButton>

                            </div>
                        </MudForm>
                    </MudPaper>
                    <MudPaper Class="pa-4 mt-4">
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" DropShadow="false" OnClick="@(()=>form.Validate())">Validar</MudButton>
                        <MudButton Variant="Variant.Filled" Color="Color.Secondary" DropShadow="false" OnClick="@(()=>form.ResetAsync())" Class="mx-2">Resetar</MudButton>
                        <MudButton Variant="Variant.Filled" DropShadow="false" OnClick="@(()=>form.ResetValidation())">Resetar Validação</MudButton>
                    </MudPaper>
                </MudItem>
                <MudItem xs="12" sm="5">
                    @if (errors.Length > 0)
                    {
                        <MudPaper Class="pa-4 mud-height-full">

                            <MudText Typo="Typo.subtitle2">@($"Errors ({errors.Length})")</MudText>
                            @foreach (var error in errors)
                            {
                                <MudText Color="@Color.Error">@error</MudText>
                            }
                        </MudPaper>
                    }

                </MudItem>
            </MudGrid>
        </MudText>
    </MudItem>
</MudGrid>

@code {
    bool success;
    string[] errors = { };
    MudTextField<string> pwField1;
    MudForm form;

    private IEnumerable<string> PasswordStrength(string pw)
    {
        if (string.IsNullOrWhiteSpace(pw))
        {
            yield return "Password is required!";
            yield break;
        }
        if (pw.Length < 8)
            yield return "Password must be at least of length 8";
        if (!Regex.IsMatch(pw, @"[A-Z]"))
            yield return "Password must contain at least one capital letter";
        if (!Regex.IsMatch(pw, @"[a-z]"))
            yield return "Password must contain at least one lowercase letter";
        if (!Regex.IsMatch(pw, @"[0-9]"))
            yield return "Password must contain at least one digit";
    }
    private string PasswordMatch(string arg)
    {
        if (pwField1.Value != arg)
            return "Passwords don't match";
        return null;
    }
    ApplicationUser user = new ApplicationUser();

    [Parameter] public EventCallback OnClick { get; set; }

    // private async Task CreateUser()
    // {
    //     // var a = await User.SignInUser(user, user.PasswordHash);
        
        
    //     // Result response = await UserRepository.SignInUser(user, user.PasswordHash);

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();
    // }
    public async Task RegisterUser()
    {
        var user = CreateUser();

        await UserStore.SetUserNameAsync(user, user.Email, CancellationToken.None);
        var emailStore = GetEmailStore();
        await emailStore.SetEmailAsync(user, user.Email, CancellationToken.None);
        var result = await UserManager.CreateAsync(user, user.PasswordHash);

        if (!result.Succeeded)
        {
            // identityErrors = result.Errors;
            return;
        }

        // Logger.LogInformation("User created a new account with password.");

        var userId = await UserManager.GetUserIdAsync(user);
        var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
      
        // var callbackUrl = NavigationManager.GetUriWithQueryParameters(
        //     NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
            // new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code, ["returnUrl"] = ReturnUrl });////////////////////////////////

        var confirmEmail = await UserManager.ConfirmEmailAsync(user, code);
    
        await SignInManager.SignInAsync(user, isPersistent: false);
        // RedirectManager.RedirectTo(ReturnUrl);
    }

    private ApplicationUser CreateUser()
    {
        try
        {
            return Activator.CreateInstance<ApplicationUser>();
        }
        catch
        {
            throw new InvalidOperationException($"Can't create an instance of '{nameof(ApplicationUser)}'. " +
                $"Ensure that '{nameof(ApplicationUser)}' is not an abstract class and has a parameterless constructor.");
        }
    }
    private IUserEmailStore<ApplicationUser> GetEmailStore()
    {
        if (!UserManager.SupportsUserEmail)
        {
            throw new NotSupportedException("The default UI requires a user store with email support.");
        }
        return (IUserEmailStore<ApplicationUser>)UserStore;
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        [Display(Name = "Email")]
        public string Email { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "Password")]
        public string Password { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";
    }
}